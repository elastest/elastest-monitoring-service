{
package stamp

import(
    dt "github.com/elastest/elastest-monitoring-service/go_EMS/datatypes"
    "github.com/elastest/elastest-monitoring-service/go_EMS/parsers/common"
)

}

Input  <- v:Version s:Filters EOF {
       return s,nil
       }

Version <- _? "version" _ ver:VersionNum _?  {
	return ver,nil
	}

VersionNum <- ([0-9'.']+) {
  	   return common.Version{string(c.text)},nil
}

kwVersion <- "version" {
	  return common.Keyword{string(c.text)},nil
	  }

Filters  <- fs:Filter+ {
	 return newFiltersNode(fs),nil
	 }

Filter <- "when" _? p:Predicate "do" _ t:Tag _? {
       return Filter{p.(common.Predicate),t.(common.Tag)},nil
       }


Predicate <- a:Ands    b:(OrExpr*)  { return common.NewOrPredicate(a,b),nil }
Ands      <- a:NegExpr b:(AndExpr*) { return common.NewAndPredicate(a,b),nil }
AndExpr   <- "/\\" _? p:NegExpr      { return p,nil }
OrExpr    <- "\\/" _? p:Ands         { return p,nil }
NegExpr   <- "~" _? p:NegExpr        { return common.NewNotPredicate(p),nil }
	 /  p:Primary             { return p,nil }
Primary   <- '(' _? p:Predicate ')' _?  { return p,nil }
         / a:AtomicPredicate	 { return a,nil }
AtomicPredicate <- p:PathPredicate _? { return p,nil }
	  / p:StrPredicate   _?  { return p,nil }
	  / p:HasTagPredicate _? { return p,nil }
	  / p:"true" _? { return common.True,nil }
	  / p:"false" _? { return common.False,nil }
PathPredicate <- "e.path(" _? p:JSONPath _? ")" _? {
	      return common.NewPathPredicate(p),nil		
}

StrPredicate <- "e.strcmp(" _? p:JSONPath _? "," _? s:QuotedString _?")" _? {
	     return common.NewStrPredicate(p,s),nil
}
HasTagPredicate <- "e.tag(" _? t:Tag _? ")" _? {
		return common.NewTagPredicate(t),nil
}

QuotedString <- '"' String '"' {
	     return common.NewQuotedString(string(c.text)),nil
}
	
JSONPath <- ([a-zA-Z0-9]+('.'[a-zA-Z0-9]+)*) {
	 return common.NewPathName(string(c.text)),nil
	 }	 

Identifier <- ([a-zA-Z][a-zA-Z0-9]*) {
	   return common.Identifier{string(c.text)}, nil
	   }

String   <- ([a-zA-Z0-9'#''_''-''@''.']+)
Alphanum <- ([a-zA-Z0-9]+) { return common.Alphanum{string(c.text)},nil }

Tag  "tag"      <- ( '#' [a-zA-Z] [a-zA-Z0-9]* )    { return common.Tag{dt.Channel(c.text)},nil }

_ "whitespace" <- [ \t\n\r]+

//EOL     <- _? Comment? ("\r\n" / "\n\r" / "\r" / "\n" / EOF)
EOL     <- ("\r\n" / "\n\r" / "\r" / "\n")

Comment <- "//" [^\r\n]*

EOF     <- !.
