swagger: "2.0"
info:
  description: "This is the OpenAPI specification for accessing the ElasTest monitoring services."
  version: "1.0.0"
  title: "Monitoring as a Service API"
  termsOfService: "TBD"
  contact:
    email: "felipe.gorostiaga@imdea.org"
  license:
    name: "License: TBD"
    # url: ""
host: "TBD"
basePath: "/"
# schemes:
# - "http"
# - "https"
paths:
  /publish:
    post:
      tags:
      - "Publishers"
      summary: "Publish events"
      description: "Through this method, a client specifies a list of events to publish over channels. Deprecated until we know how to document it properly."
      operationId: "publishEvents"
      deprecated: true
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "events"
        description: "Events to be published.."
        required: true
        schema:
         type: "array"
         items: 
           $ref: "#/definitions/Event"
      responses:
        405:
          description: "Invalid input.."
        200:
          description: "Events successfully published.."
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
      #

  /subscriber/elasticsearch:
    post:
      tags:
      - "Subscribers"
      summary: "Subscribe an elasticsearch endpoint to a channel"
      description: "Through this method, a client can subscribe an elasticsearch instance to a channel and receive the events published on it."
      operationId: "subscribeElasticSearch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "endpoint"
        description: "Endpoint to be registered."
        required: true
        schema:
          $ref: "#/definitions/ESEndpoint"
      responses:
        405:
          description: "Invalid input."
        200:
          description: "Endpoint successfully registered."
          schema:
            type: "string"
            description: "Id of subscription."
          # schema:
          #    $ref: "#/definitions/Event" For future reference: this is how you return sth
  /subscriber/rabbitmq:
    post:
      tags:
      - "Subscribers"
      summary: "Subscribe a rabbitmq endpoint to a channel"
      description: "Through this method, a client can subscribe a rabbitmq instance to a channel and receive the events published on it."
      operationId: "subscribeRabbitMQ"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "endpoint"
        description: "Endpoint to be registered."
        required: true
        schema:
          $ref: "#/definitions/RMQEndpoint"
      responses:
        405:
          description: "Invalid input."
        200:
          description: "Endpoint successfully registered."
          schema:
            type: "string"
            description: "Id of subscription."
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  /subscriber/{subId}:
    delete:
      tags:
      - "Subscribers"
      summary: "Unsubscribe an endpoint"
      description: "Through this method, a client unbinds an endpoint."
      operationId: "unsubscribe"
      produces:
      - "application/json"
      parameters:
      - name: "subId"
        in: "path"
        description: "Subscription id to drop."
        required: true
        type: "string"
      responses:
        200:
          description: "Endpoint successfully unsubscribed."
        400:
          description: "Invalid Id supplied."
        404:
          description: "Subscriber not found."

  /announcement:
    post:
      tags:
      - "Announcements"
      summary: "Register a new announcement rule"
      description: "TORM/EPM/ESM may register a rule to infer the channel to route raw events when it is not explicitly defined."
      operationId: "register"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "routingRule"
        description: "Rule to be registered."
        required: true
        schema:
          $ref: "#/definitions/AnnouncementRule"
      responses:
        405:
          description: "Invalid input."
        200:
          description: "Announcement successfully registered."
          schema:
            type: "string"
            description: "Id of registration."
  /announcement/{regId}:
    delete:
      tags:
      - "Announcements"
      summary: "Drop an announcement rule"
      description: "Through this method, a client removes an announcement rule."
      operationId: "unregister"
      produces:
      - "application/json"
      parameters:
      - name: "regId"
        in: "path"
        description: "Registration id to drop."
        required: true
        type: "string"
      responses:
        200:
          description: "Announcement successfully removed."
        400:
          description: "Invalid Id supplied."
        404:
          description: "Announcement not found."
      
  /MonitoringMachine:
    get:
      tags:
      - "MonitoringMachine"
      summary: "Get the list of deployed MoM"
      description: "Retrieves the list of deployed MoMs."
      operationId: "getDeployedMoMs"
      produces:
      - "application/json"
      responses:
        200:
          description: "Array of MoMs deployed."
          schema:
           type: "array"
           items: 
              $ref: "#/definitions/DeployedMoM"
        405:
          description: "Monitoring machines are not allowed in this version of the ElasTest Monitoring Service"
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
    post:
      tags:
      - "MonitoringMachine"
      summary: "Deploy a new MoM"
      description: "Through this method, a client deploys a new MoM."
      operationId: "postMoM"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "mom"
        description: "MoM to be deployed."
        required: true
        schema:
          $ref: "#/definitions/MoM"
      responses:
        405:
          description: "Monitoring machines are not allowed in this version of the ElasTest Monitoring Service"
        200:
          description: "MoM successfully deployed."
          schema:
            type: "string"
            description: "id of deployed MoM."
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
  /MonitoringMachine/{MoMId}:
    get:
      tags:
      - "MonitoringMachine"
      summary: "Find MoM by Id"
      description: "Returns a single MoM."
      operationId: "getMoMById"
      produces:
      - "application/json"
      parameters:
      - name: "MoMId"
        in: "path"
        description: "Id of MoM to return."
        required: true
        type: "string"
      responses:
        200:
          description: "MoM found and returned."
          schema:
            $ref: '#/definitions/MoM'
        405:
          description: "Monitoring machines are not allowed in this version of the ElasTest Monitoring Service"
        404:
          description: "MoM not found."
    put:
      tags:
      - "MonitoringMachine"
      summary: "Update an existing MoM"
      description: "."
      operationId: "updateMoM"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "MoMId"
        in: "path"
        description: "Id of MoM to return."
        required: true
        type: "string"
      - in: "body"
        name: "mom"
        description: "New MoM definition."
        required: true
        schema:
          $ref: "#/definitions/MoM"
      responses:
        200:
          description: "MoM successfully updated."
        400:
          description: "Invalid MoM supplied."
        404:
          description: "MoM not found."
        405:
          description: "Monitoring machines are not allowed in this version of the ElasTest Monitoring Service"
    delete:
      tags:
      - "MonitoringMachine"
      summary: "Deletes a MoM"
      description: "."
      operationId: "deleteMoM"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "MoMId"
        in: "path"
        description: "Id of MoM to delete."
        required: true
        type: "string"
      responses:
        200:
          description: "MoM successfully deleted."
        400:
          description: "Invalid Id supplied."
        404:
          description: "MoM not found."
        405:
          description: "Monitoring machines are not allowed in this version of the ElasTest Monitoring Service"
  /flush:
    post:
      tags:
      - "Flush"
      summary: "Flush EMS data"
      description: "This method resets the EMS instance to its initial state, as if it had just been started."
      operationId: "flush"
      responses:
        200:
          description: "EMS successfully flushed."
  /health:
    get:
      tags:
      - "Health"
      summary: "Get health information about the EMS"
      description: "This method returns a health summary of this Monitoring Service instance."
      operationId: "getHealth"
      responses:
        200:
          description: "EMS is functioning correctly."
          schema:
            $ref: '#/definitions/HealthSummary'
  /environment:
    get:
      tags:
      - "Health"
      summary: "Get environment information about the EMS"
      description: "This method returns information about the environment where this Monitoring Service instance was deployed in JSON format."
      operationId: "getEnvironment"
      responses:
        200:
          description: "Check body to find the environment information.."
          schema:
            type: "string"
            description: "Environment information."
definitions:
  Event:
    type: "object"
    properties:
      header:
        $ref: "#/definitions/EventHeader"
      payload:
        type: "string"
  EventHeader:
    type: "object"
    properties:
      id:
        type: "string"
      channel:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
  MoM:
    type: "object"
    properties:
      definition:
        type: "string"
      momType:
        type: "string"
  DeployedMoM:
    type: "object"
    properties:
        id:
          type: "string"
        mom:
          $ref: "#/definitions/MoM"
  ESEndpoint:
    type: "object"
    properties:
      channel:
        type: "string"
      ip:
        type: "string"
      port:
        type: "integer"
      user:
        type: "string"
      password:
        type: "string"
  RMQEndpoint:
    type: "object"
    properties:
      channel:
        type: "string"
      ip:
        type: "string"
      port:
        type: "integer"
      user:
        type: "string"
      password:
        type: "string"
      key:
        type: "string"
      exchange:
        type: "string"
      exchange_type:
        type: "string"
  AnnouncementRule:
    type: "object"
    properties:
      inferenceRule:
        type: "string"
  HealthSummary:
    type: "object"
    properties:
      status:
        type: "string"
externalDocs:
  description: "Monitoring Services and Instrumentation Agents document."
  url: "https://docs.google.com/document/d/1Txd9qNtLbYWph1Ne61TfNomtAxQtmH2P-8Ib5SZ1uiE"
